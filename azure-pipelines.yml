trigger:
- main

variables:
  - group: AWS-Credentials  # Your variable group with AWS secrets
  - name: tf.version
    value: '1.12.2'
  - name: aws.region
    value: 'us-east-1'
  - name: environment
    value: 'dev'
  - name: tf.root.dir
    value: 'role-terraform-03-06-25/environments/dev'
  - name: tf.vars.file
    value: 'dev.tfvars'

pool: Default  # Or your self-hosted agent pool name

stages:
- stage: Validate
  displayName: 'Validate Terraform'
  jobs:
  - job: Validate
    displayName: 'Terraform Validate'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform $(tf.version)'
      inputs:
        terraformVersion: $(tf.version)
    
    - bash: |
        echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID]$(AWS_ACCESS_KEY_ID)"
        echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY]$(AWS_SECRET_ACCESS_KEY)"
        echo "##vso[task.setvariable variable=AWS_DEFAULT_REGION]$(aws.region)"
      displayName: 'Set AWS Credentials'
    
    - task: TerraformCLI@0
      displayName: 'Terraform Init'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(tf.root.dir)'
    
    - task: TerraformCLI@0
      displayName: 'Terraform Validate'
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(tf.root.dir)'

- stage: Plan
  displayName: 'Terraform Plan'
  dependsOn: Validate
  jobs:
  - job: Plan
    displayName: 'Generate Terraform Plan'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(tf.version)
    
    - bash: |
        echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID]$(AWS_ACCESS_KEY_ID)"
        echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY]$(AWS_SECRET_ACCESS_KEY)"
        echo "##vso[task.setvariable variable=AWS_DEFAULT_REGION]$(aws.region)"
      displayName: 'Set AWS Credentials'
    
    - task: TerraformCLI@0
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(tf.root.dir)'
        commandOptions: '-out=tfplan -var-file=$(tf.vars.file)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Plan Artifact'
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/$(tf.root.dir)/tfplan'
        ArtifactName: 'tfplan'
        publishLocation: 'Container'

- stage: Approve
  displayName: 'Manual Approval'
  dependsOn: Plan
  jobs:
  - job: WaitForApproval
    displayName: 'Wait for approval'
    pool: server  # This still uses hosted for approval
    steps:
    - task: ManualValidation@0
      displayName: 'Approve Terraform Apply'
      inputs:
        notifyUsers: |
          your.email@example.com
        instructions: 'Please review the Terraform plan'

- stage: Apply
  displayName: 'Terraform Apply'
  dependsOn: Approve
  condition: succeeded()
  jobs:
  - job: Apply
    displayName: 'Apply Terraform Changes'
    pool: Default  # Your self-hosted agent
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(tf.version)
    
    - bash: |
        echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID]$(AWS_ACCESS_KEY_ID)"
        echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY]$(AWS_SECRET_ACCESS_KEY)"
        echo "##vso[task.setvariable variable=AWS_DEFAULT_REGION]$(aws.region)"
      displayName: 'Set AWS Credentials'
    
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Plan Artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'tfplan'
        downloadPath: '$(System.DefaultWorkingDirectory)/$(tf.root.dir)'
    
    - task: TerraformCLI@0
      displayName: 'Terraform Apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(tf.root.dir)'
        commandOptions: 'tfplan'